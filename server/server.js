/* global process */
import express from "express";
import nodemailer from "nodemailer";
import cors from "cors";
import "dotenv/config";
import path from "path";
import { fileURLToPath } from "url";
import puppeteer from "puppeteer";

// SEO
// üîç –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –±–æ—Ç–æ–≤
const isSearchBot = (userAgent) => {
  // –°–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–æ—Ç–æ–≤
  const bots = [
    "googlebot", // Google
    "bingbot", // Bing (Microsoft)
    "yandexbot", // Yandex
    "slurp", // Yahoo
    "duckduckbot", // DuckDuckGo
    "baiduspider", // Baidu (–ö–∏—Ç–∞–π)
    "facebot", // Facebook
    "twitterbot", // Twitter
    "whatsapp", // WhatsApp
    "telegrambot", // Telegram
    "linkedinbot", // LinkedIn
    "pinterest", // Pinterest
  ];

  // –ï—Å–ª–∏ userAgent –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω - —ç—Ç–æ –Ω–µ –±–æ—Ç
  if (!userAgent) return false;

  // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const agent = userAgent.toLowerCase();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª—é–±–æ–π –∏–∑ –±–æ—Ç–æ–≤ –≤ userAgent
  return bots.some((bot) => agent.includes(bot));
};
// üöÄ –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–ª—è –±–æ—Ç–æ–≤
async function prerenderPage(url) {
  let browser;
  try {
    console.log(`üîç –ü—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–ª—è: ${url}`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä (–±–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
    browser = await puppeteer.launch({
      headless: "new", // –†–µ–∂–∏–º –±–µ–∑ –æ–∫–æ–Ω
      args: [
        "--no-sandbox", // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        "--disable-setuid-sandbox",
        "--disable-dev-shm-usage", // –≠–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏
        "--disable-accelerated-2d-canvas",
        "--no-first-run",
        "--no-zygote",
        "--disable-gpu",
      ],
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
    const page = await browser.newPage();
    page.setDefaultNavigationTimeout(8000); // 8 —Å–µ–∫—É–Ω–¥ –Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    // @ts-ignore
    page.setDefaultTimeout(5000); // 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ª—é–±—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π user-agent (–∫–∞–∫ —É –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞)
    await page.setUserAgent(
      "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    );

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ñ–î–ï–ú –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    await page.goto(url, {
      waitUntil: "networkidle0", // –ñ–¥–µ–º –∫–æ–≥–¥–∞ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è
      timeout: 8000, // –ú–∞–∫—Å–∏–º—É–º 8 —Å–µ–∫—É–Ω–¥ –∂–¥–µ–º
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è React (–æ–Ω –º–æ–∂–µ—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    await page.waitForTimeout(1000);

    // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–π HTML –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ–≥–æ JavaScript
    const html = await page.content();
    return html;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:", error.message);
    return null; // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
  } finally {
    // –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —á—Ç–æ–±—ã –Ω–µ —Ç–µ–∫–ª–∞ –ø–∞–º—è—Ç—å
    if (browser) {
      await browser.close();
    }
  }
}

// –î–ª—è ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 5000;

// CORS
app.use(
  cors({
    origin: function (origin, callback) {
      const allowedOrigins = [
        "http://localhost:5173",
        "https://resume-sooty-seven-86.vercel.app",
        "http://185.119.59.38",
        "http://sozdat-moshniy-web.ru",
        "https://sozdat-moshniy-web.ru",
      ];
      if (!origin) return callback(null, true);
      if (allowedOrigins.includes(origin)) {
        callback(null, true);
      } else {
        console.log("üö´ CORS –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è origin:", origin);
        callback(new Error("Not allowed by CORS"));
      }
    },
    credentials: true,
  })
);

app.use(express.json());
app.use(express.static(path.join(__dirname, "..", "dist")));

// –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º (–¢–û–õ–¨–ö–û YANDEX)
const createTransporter = () => {
  return nodemailer.createTransport({
    host: "smtp.yandex.ru",
    port: 465,
    secure: true,
    auth: {
      user: process.env.YANDEX_USER,
      pass: process.env.YANDEX_PASS,
    },
  });
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è email
const isValidEmail = (email) => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

const sendToTelegram = async (email, messageText) => {
  try {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_ID;
    if (!token || !chatId) {
      console.log("‚ùå Telegram credentials not found");
      return false;
    }
    const text = `
üìß –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞
–û—Ç: ${email}
–°–æ–æ–±—â–µ–Ω–∏–µ: ${messageText}
–í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}
    `.trim();
    const response = await fetch(
      `https://api.telegram.org/bot${token}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: text,
        }),
      }
    );
    const result = await response.json();

    if (result.ok) {
      console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram");
      return true;
    } else {
      console.log("‚ùå –û—à–∏–±–∫–∞ Telegram:", result);
      return false;
    }
  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:", error.message);
    return false;
  }
};

const validateInput = (email, message) => {
  if (!email || !message) {
    return "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è";
  }
  if (!isValidEmail(email)) {
    return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email";
  }
  if (message.length < 5) {
    return "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤";
  }
  if (message.length > 1000) {
    return "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)";
  }
  return null;
};

app.post("/api/send-email", async (req, resp) => {
  try {
    const { email, message } = req.body;
    console.log("üìß –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", { email, message });

    const validationError = validateInput(email, message);
    if (validationError) {
      console.log("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", validationError);
      return resp.status(400).json({
        success: false,
        message: validationError,
      });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
    const sendEmail = async () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¢–û–õ–¨–ö–û YANDEX)
        if (
          !process.env.YANDEX_USER ||
          !process.env.YANDEX_PASS ||
          !process.env.RECEIVER_EMAIL
        ) {
          console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è email:");
          console.error("YANDEX_USER:", !!process.env.YANDEX_USER);
          console.error("YANDEX_PASS:", !!process.env.YANDEX_PASS);
          console.error("RECEIVER_EMAIL:", !!process.env.RECEIVER_EMAIL);
          throw new Error("Missing email environment variables");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ email –≤–∞–ª–∏–¥–Ω—ã–π
        if (!email || !email.includes("@")) {
          console.error("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email:", email);
          throw new Error("Invalid email format");
        }

        const transporter = createTransporter();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SMTP
        await transporter.verify();
        console.log("‚úÖ SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ");

        const mailOptions = {
          from: `"–°–∞–π—Ç-—Ä–µ–∑—é–º–µ" <${process.env.YANDEX_USER}>`,
          to: process.env.RECEIVER_EMAIL,
          replyTo: email,
          subject: `üíº –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${email}`,
          html: `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
              <h2 style="color: #333;">–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞-—Ä–µ–∑—é–º–µ</h2>
              <div style="background: #f5f5f5; padding: 15px; border-radius: 5px;">
                <p><strong>–û—Ç:</strong> ${email}</p>
                <p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong></p>
                <p style="white-space: pre-wrap;">${message}</p>
              </div>
              <p style="color: #666; font-size: 12px; margin-top: 20px;">
                –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date().toLocaleString("ru-RU")}
              </p>
            </div>
          `,
        };

        const result = await transporter.sendMail(mailOptions);
        console.log("‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ. MessageId:", result.messageId);
        return true;
      } catch (error) {
        console.log("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:", error.message);
        console.log("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", error);
        throw error;
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const [emailResult, telegramResult] = await Promise.allSettled([
      sendEmail(),
      sendToTelegram(email, message),
    ]);

    console.log("üìß Email —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", emailResult.status, emailResult.reason);
    console.log("ü§ñ Telegram —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", telegramResult.status);

    // –í–ê–ñ–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—Ö –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º —É–ø–∞–ª, –Ω–æ email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    if (emailResult.status === "fulfilled" && emailResult.value) {
      resp.json({
        success: true,
        message:
          "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
      });
    } else {
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
      const errorMessage =
        emailResult.reason?.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è";
      console.log("‚ùå –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", errorMessage);
      resp.status(500).json({
        success: false,
        message: errorMessage,
      });
    }
  } catch (error) {
    console.error("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:", error);
    resp.status(500).json({
      success: false,
      message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
    });
  }
});

// Health check endpoint
app.get("/api/health", (req, res) => {
  res.json({
    status: "OK",
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || "development",
    services: {
      email: !!process.env.YANDEX_USER,
      telegram: !!(process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_ID),
    },
  });
});

// üéØ –£–ú–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è SEO
app.get("*", async (req, res) => {
  const userAgent = req.headers["user-agent"];
   const currentPath = req.originalUrl || req.url

  console.log(`üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: ${path}`);
  console.log(`üë§ User Agent: ${userAgent}`);

  // üõë –ü—Ä–æ–ø—É—Å–∫–∞–µ–º API —Ä–æ—É—Ç—ã –∏ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
  if (currentPath.startsWith("/api/") || currentPath.includes(".")) {
    console.log(`‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (API –∏–ª–∏ —Ñ–∞–π–ª): ${path}`);
    return res.status(404).send("Not found");
  }

  // ü§ñ –ü—Ä–æ–≤–µ—Ä—è–µ–ºÊòØÂê¶ÊòØ –ø–æ–∏—Å–∫–æ–≤—ã–π –±–æ—Ç
  if (isSearchBot(userAgent)) {
    console.log(`ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –±–æ—Ç: ${path}`);

    try {
      // ‚úÖ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô URL –î–õ–Ø –õ–û–ö–ê–õ –ò –ü–†–û–î–ê–ö–®–ï–ù–ê
      const protocol = req.protocol; // http –∏–ª–∏ https
      const host = req.get("host"); // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ—Ä–µ—Ç –¥–æ–º–µ–Ω
      const baseUrl = `${protocol}://${host}`;

      console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥: ${baseUrl}${path}`);

      const prerenderedHtml = await prerenderPage(`${baseUrl}${path}`);

      if (prerenderedHtml) {
        console.log(`‚úÖ –û—Ç–¥–∞–µ–º –ø—Ä–µ—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è: ${path}`);
        return res.send(prerenderedHtml);
      } else {
        console.log(`‚ùå –ü—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –æ—Ç–¥–∞–µ–º SPA`);
        // –ï—Å–ª–∏ –ø—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - –æ—Ç–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –≤–µ—Ä—Å–∏—é
        return res.sendFile(path.join(__dirname, "..", "dist", "index.html"));
      }
    } catch (error) {
      console.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ, –æ—Ç–¥–∞–µ–º SPA:", error.message);
      return res.sendFile(path.join(__dirname, "..", "dist", "index.html"));
    }
  }

  // üë®‚Äçüíª –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –æ—Ç–¥–∞–µ–º SPA –∫–∞–∫ –æ–±—ã—á–Ω–æ
  console.log(`üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç–¥–∞–µ–º SPA: ${path}`);
  res.sendFile(path.join(__dirname, "..", "dist", "index.html"));
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT,() => {
  console.log(`üöÄ Server running on port ${PORT}`);
  console.log(`üåç Environment: ${process.env.NODE_ENV || "development"}`);
  console.log(
    `üìß Email service: ${
      process.env.YANDEX_USER ? "‚úÖ Configured" : "‚ùå Not configured"
    }`
  );
  console.log(
    `ü§ñ Telegram: ${
      process.env.TELEGRAM_BOT_TOKEN ? "‚úÖ Configured" : "‚ùå Not configured"
    }`
  );
  console.log(`üéØ SEO –ü—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥: ‚úÖ –ê–ö–¢–ò–í–ï–ù –¥–ª—è –±–æ—Ç–æ–≤`);
  console.log(`üì± Health check: http://localhost:${PORT}/api/health`);
});
