/* global process */
import express from "express";
import nodemailer from "nodemailer";
import cors from "cors";
import "dotenv/config";
import path from "path";
import { fileURLToPath } from "url";

// –î–ª—è ES modules - –î–û–ë–ê–í–õ–Ø–ï–ú –≠–¢–û
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

//–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ express
const app = express();

const PORT = process.env.PORT || 5000;
//–ø–æ–∑–≤–æ–ª—è–µ—Ç —Ñ—Ä–æ–Ω—Ç—É –æ–±—â–∞—Ç—å—Å—è —Å –±—ç–∫–æ–º
//–ø–æ–∑–≤–æ–ª—è–µ—Ç —Ñ—Ä–æ–Ω—Ç—É –æ–±—â–∞—Ç—å—Å—è —Å –±—ç–∫–æ–º
app.use(
  cors({
    origin: function (origin, callback) {
      // –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
      const allowedOrigins = [
        "http://localhost:5173", // –õ–æ–∫–∞–ª—å–Ω—ã–π Vite
        "https://resume-sooty-seven-86.vercel.app", // –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Ñ—Ä–æ–Ω—Ç
      ];

      // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)
      if (!origin) return callback(null, true);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ origin –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
      if (allowedOrigins.includes(origin)) {
        callback(null, true);
      } else {
        console.log("üö´ CORS –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è origin:", origin);
        callback(new Error("Not allowed by CORS"));
      }
    },
    credentials: true,
  })
);
//—É—á–∏—Ç —Å–µ—Ä–µ–≤–µ—Ä –ø–æ–Ω–∏–º–∞—Ç—å json
app.use(express.json());
// –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(path.join(__dirname, "..", "dist")));

// 1




// –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º
const createTransporter = () => {
  return nodemailer.createTransport({
    host: "smtp.gmail.com",
    port: 587,
    secure: false, // true –¥–ª—è 465, false –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ—Ä—Ç–æ–≤
    auth: {
      user: process.env.GMAIL_USER,
      pass: process.env.GMAIL_APP_PASS,
    },
    tls: {
      rejectUnauthorized: false,
    },
  });
};
// –í–∞–ª–∏–¥–∞—Ü–∏—è email –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ(–ø–æ–º–∏–º–æ —Ä–µ–∞–∫—Ç-—Ö—É–∫—Ñ–æ—Ä–º—ã)
const isValidEmail = (email) => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

const sendToTelegramm = async (email, messageText) => {
  try {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_ID;
    if (!token || !chatId) {
      console.log("‚ùå Telegram credentials not found");
      return false;
    }
    const text = `
üìß –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞
–û—Ç: ${email}
–°–æ–æ–±—â–µ–Ω–∏–µ: ${messageText}
–í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}
    `.trim();
    const response = await fetch(
      `https://api.telegram.org/bot${token}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: text,
        }),
      }
    );
    const result = await response.json();

    if (result.ok) {
      console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram");
      return true;
    } else {
      console.log("‚ùå –û—à–∏–±–∫–∞ Telegram:", result);
      return false;
    }
  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:", error.message);
    return false;
  }
};
const validateInput = (email, message) => {
  if (!email || !message) {
    return "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è";
  }

  if (!isValidEmail(email)) {
    return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email";
  }

  if (message.length < 5) {
    return "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤";
  }

  if (message.length > 1000) {
    return "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)";
  }

  return null; // null –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ—à–∏–±–æ–∫ –Ω–µ—Ç
};

app.post("/api/send-email", async (req, resp) => {
  try {
    const { email, message } = req.body;

    console.log("üìß –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", { email, message });

    const validationError = validateInput(email, message);
    if (validationError) {
      console.log("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", validationError);
      return resp.status(400).json({
        success: false,
        message: validationError,
      });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const sendEmailWithTimeout = async () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if (
          !process.env.GMAIL_USER ||
          !process.env.GMAIL_APP_PASS ||
          !process.env.RECEIVER_EMAIL
        ) {
          console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è email:");
          console.error("GMAIL_USER:", !!process.env.GMAIL_USER);
          console.error("GMAIL_APP_PASS:", !!process.env.GMAIL_APP_PASS);
          console.error("RECEIVER_EMAIL:", !!process.env.RECEIVER_EMAIL);
          return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ email –≤–∞–ª–∏–¥–Ω—ã–π
        if (!email || !email.includes("@")) {
          console.error("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email:", email);
          return false;
        }

        const transporter = createTransporter();

        const mailOptions = {
          from: process.env.GMAIL_USER,
          to: process.env.RECEIVER_EMAIL,
          replyTo: email,
          subject: `üíº –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${email}`,
          html: `
            <!-- —Ç–≤–æ–π HTML –∫–æ–¥ -->
          `,
        };

        await transporter.sendMail(mailOptions);
        console.log("‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");
        return true;
      } catch (error) {
        console.log("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:", error.message);
        return false;
      }
    }; // ‚¨ÖÔ∏è –ó–ê–ö–†–´–í–ê–ï–ú sendEmailWithTimeout

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const [emailSuccess, telegramSuccess] = await Promise.allSettled([
      sendEmailWithTimeout(),
      sendToTelegramm(email, message),
    ]);

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log("üìß Email —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", emailSuccess.status);
    console.log("ü§ñ Telegram —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", telegramSuccess.status);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (emailSuccess.status === "fulfilled" && emailSuccess.value) {
      resp.json({
        success: true,
        message:
          "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
      });
    } else {
      resp.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
      });
    }
  } catch (error) {
    // ‚¨ÖÔ∏è –î–û–ë–ê–í–õ–Ø–ï–ú catch –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ try
    console.error("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:", error);
    resp.status(500).json({
      success: false,
      message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
    });
  }
}); // ‚¨ÖÔ∏è –ó–ê–ö–†–´–í–ê–ï–ú app.post

// Health check endpoint
app.get("/api/health", (req, res) => {
  res.json({
    status: "OK",
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || "development",
    services: {
      email: !!process.env.GMAIL_USER,
      telegram: !!(process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_ID),
    },
  });
});

// –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –∫–∞–∫–æ–º –ø–æ—Ä—Ç–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
  console.log(`üåç Environment: ${process.env.NODE_ENV || "development"}`);
  console.log(
    `üìß Email service: ${
      process.env.GMAIL_USER ? "‚úÖ Configured" : "‚ùå Not configured"
    }`
  );
  console.log(
    `ü§ñ Telegram: ${
      process.env.TELEGRAM_BOT_TOKEN ? "‚úÖ Configured" : "‚ùå Not configured"
    }`
  );
  console.log(`üì± Health check: http://localhost:${PORT}/api/health`);
}); // ‚¨ÖÔ∏è –ó–ê–ö–†–´–í–ê–ï–ú app.listen
