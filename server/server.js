/* global process */
import express from "express";
import nodemailer from "nodemailer";
import cors from "cors";
import "dotenv/config";
import path from "path";
import { fileURLToPath } from "url";

// –î–ª—è ES modules - –î–û–ë–ê–í–õ–Ø–ï–ú –≠–¢–û
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

//–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ express
const app = express();

const PORT = process.env.PORT || 5000;
//–ø–æ–∑–≤–æ–ª—è–µ—Ç —Ñ—Ä–æ–Ω—Ç—É –æ–±—â–∞—Ç—å—Å—è —Å –±—ç–∫–æ–º
app.use(cors({
  origin: process.env.FRONTEND_URL || "http://localhost:5173",
  credentials: true
}));
//—É—á–∏—Ç —Å–µ—Ä–µ–≤–µ—Ä –ø–æ–Ω–∏–º–∞—Ç—å json
app.use(express.json());
// –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(path.join(__dirname, "..", "dist")));

// –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º
const createTransporter = () => {
  return nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: process.env.GMAIL_USER,
      pass: process.env.GMAIL_APP_PASS,
    },
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç—ã
    pool: true,
    maxConnections: 1,
    socketTimeout: 15000, // 15 —Å–µ–∫—É–Ω–¥
    connectionTimeout: 15000,
  });
};
// –í–∞–ª–∏–¥–∞—Ü–∏—è email –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ(–ø–æ–º–∏–º–æ —Ä–µ–∞–∫—Ç-—Ö—É–∫—Ñ–æ—Ä–º—ã)
const isValidEmail = (email) => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

const sendToTelegramm = async (email, messageText) => {
  try {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_ID;
      if (!token || !chatId) {
      console.log("‚ùå Telegram credentials not found");
      return false;
    }
    const text = `
üìß –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞
–û—Ç: ${email}
–°–æ–æ–±—â–µ–Ω–∏–µ: ${messageText}
–í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}
    `.trim();
    const response = await fetch(
      `https://api.telegram.org/bot${token}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id : chatId,
          text: text,
        }),
      }
    );
    const result = await response.json();

    if (result.ok) {
      console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram");
      return true;
    } else {
      console.log("‚ùå –û—à–∏–±–∫–∞ Telegram:", result);
      return false;
    }
  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:", error.message);
    return false;
  }
};
// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const validateInput = (email, message) => {
  if (!email || !message) {
    return "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è";
  }
  
  if (!isValidEmail(email)) {
    return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email";
  }
  
  if (message.length < 5) {
    return "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤";
  }
  
  if (message.length > 1000) {
    return "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)";
  }
  
  return null; // null –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ—à–∏–±–æ–∫ –Ω–µ—Ç
};
// app.post("/api/send-email", async (req, resp) => {
//   try {
//     // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
//     const { email, message } = req.body;

//     // 2. –î–û–ë–ê–í–õ–Ø–ï–ú –í–ê–õ–ò–î–ê–¶–ò–Æ
//     const validationError = validateInput(email, message);
//     if (validationError) {
//       return resp.status(400).json({
//         success: false,
//         message: validationError,
//       });
//     }

//     // 3. –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
//     const transporter = createTransporter();
    
//     // 4. –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–û–í–ï–†–ö–£ –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
//     if (!process.env.GMAIL_USER || !process.env.GMAIL_APP_PASS || !process.env.RECEIVER_EMAIL) {
//       console.error("Missing environment variables");
//       return resp.status(500).json({
//         success: false,
//         message: "–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
//       });
//     }

//     // 5. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∏—Å—å–º–æ (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
//     const mailOptions = {
//       from: process.env.GMAIL_USER,
//       to: process.env.RECEIVER_EMAIL,
//       replyTo: email,
//       subject: `üíº –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${email}`,
//       html: `
//     <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
//       <h2 style="color: #2c3e50; text-align: center;">üíº –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å —Å–∞–π—Ç–∞</h2>
      
//       <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
//         <h3 style="color: #495057; margin-top: 0;">üìß –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</h3>
//         <p><strong>Email:</strong> ${email}</p>
//         <p><strong>–î–∞—Ç–∞:</strong> ${new Date().toLocaleString("ru-RU")}</p>
//       </div>
      
//       <div style="background: #e8f4fd; padding: 20px; border-radius: 8px; border-left: 4px solid #3498db;">
//         <h3 style="color: #495057; margin-top: 0;">üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:</h3>
//         <p style="white-space: pre-wrap; line-height: 1.6; background: white; padding: 15px; border-radius: 5px;">${message}</p>
//       </div>
      
//       <div style="margin-top: 25px; padding: 15px; background: #f1f3f4; border-radius: 5px; text-align: center;">
//         <p style="margin: 0; color: #666; font-size: 14px;">
//           üì© <strong>–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É</strong>, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–≤–µ—Ç–∏—Ç—å" –≤ –≤–∞—à–µ–º –ø–æ—á—Ç–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ
//         </p>
//       </div>
//     </div>
//   `,
//     };

//     // 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
//     await transporter.sendMail(mailOptions);
//     console.log("‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");

//     // 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
//     try {
//       const telegramSuccess = await sendToTelegramm(email, message);
//       if (telegramSuccess) {
//         console.log('‚úÖ Telegram –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
//       } else {
//         console.log('‚ùå Telegram –Ω–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–æ email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
//       }
//     } catch (error) {
//       console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error);
//     }

//     // 8. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
//     resp.json({
//       success: true,
//       message: "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
//     });

//   } catch (error) {
//     console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:", error);
//     resp.status(500).json({
//       success: false,
//       message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
//     });
//   }
// });
app.post("/api/send-email", async (req, resp) => {
  try {
    const { email, message } = req.body;

    console.log("üìß –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", { email, message });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const sendEmailWithTimeout = async () => {
      try {
        const transporter = createTransporter();
        
        const mailOptions = {
          from: process.env.GMAIL_USER,
          to: process.env.RECEIVER_EMAIL,
          replyTo: email,
          subject: `üíº –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${email}`,
          html: `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
              <h2 style="color: #2c3e50; text-align: center;">üíº –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å —Å–∞–π—Ç–∞</h2>
              
              <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                <h3 style="color: #495057; margin-top: 0;">üìß –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</h3>
                <p><strong>Email:</strong> ${email}</p>
                <p><strong>–î–∞—Ç–∞:</strong> ${new Date().toLocaleString("ru-RU")}</p>
              </div>
              
              <div style="background: #e8f4fd; padding: 20px; border-radius: 8px; border-left: 4px solid #3498db;">
                <h3 style="color: #495057; margin-top: 0;">üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:</h3>
                <p style="white-space: pre-wrap; line-height: 1.6; background: white; padding: 15px; border-radius: 5px;">${message}</p>
              </div>
              
              <div style="margin-top: 25px; padding: 15px; background: #f1f3f4; border-radius: 5px; text-align: center;">
                <p style="margin: 0; color: #666; font-size: 14px;">
                  üì© <strong>–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É</strong>, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–≤–µ—Ç–∏—Ç—å" –≤ –≤–∞—à–µ–º –ø–æ—á—Ç–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ
                </p>
              </div>
            </div>
          `,
        };

        await transporter.sendMail(mailOptions);
        console.log("‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");
        return true;
      } catch (error) {
        console.log("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:", error.message);
        return false;
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const [emailSuccess, telegramSuccess] = await Promise.allSettled([
      sendEmailWithTimeout(),
      sendToTelegramm(email, message)
    ]);

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log("üìß Email —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", emailSuccess.status);
    console.log("ü§ñ Telegram —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", telegramSuccess.status);

    // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –∫–ª–∏–µ–Ω—Ç—É
    resp.json({
      success: true,
      message: "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
    });

  } catch (error) {
    console.error("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:", error);
    // –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∏–¥–µ–ª –æ—à–∏–±–∫—É
    resp.json({
      success: true,
      message: "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
    });
  }
});
// Health check endpoint —É–∑–Ω–∞—Ç—å –ø–æ—Å–ª–µ –ø–æ–¥—Ä–æ–±–Ω–æ!!!
app.get("/api/health", (req, res) => {
  res.json({ 
    status: "OK", 
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || "development",
    services: {
      email: !!process.env.GMAIL_USER,
      telegram: !!(process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_ID)
    }
  });
});
// app.get("*", (req, res) => {
//   res.sendFile(path.join(__dirname, "..", "dist", "index.html"));
// });
//—É–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –∫–∞–∫–æ–º –ø–æ—Ä—Ç–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
// –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –∫–∞–∫–æ–º –ø–æ—Ä—Ç–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
  console.log(`üåç Environment: ${process.env.NODE_ENV || "development"}`);
  console.log(`üìß Email service: ${process.env.GMAIL_USER ? "‚úÖ Configured" : "‚ùå Not configured"}`);
  console.log(`ü§ñ Telegram: ${process.env.TELEGRAM_BOT_TOKEN ? "‚úÖ Configured" : "‚ùå Not configured"}`);
  console.log(`üì± Health check: http://localhost:${PORT}/api/health`);
});